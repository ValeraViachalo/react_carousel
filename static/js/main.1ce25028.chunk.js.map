{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","source","useState","translate","setTranslate","step","setStep","frameSize","setFrameSize","itemWidth","setItemWidth","animationDuration","setAnimationDuration","carouselLength","length","maxTranslateRight","styleVisibleCarousel","transform","transition","styleCarousel","width","styleCarouselImage","className","style","map","element","index","src","alt","type","onClick","currentTranslate","prevButton","nextButton","htmlFor","id","value","onChange","event","currentTarget","min","max","App","state","images","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gQA0KeA,EAnKmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnC,EAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,KAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAkDR,mBAAS,KAA3D,mBAAOS,EAAP,KAA0BC,EAA1B,KAEMC,EAAiBZ,EAAOa,OAASL,EACjCM,EAAuCN,EAAYF,EAA9BM,EAErBG,EAAuB,CAC3BC,UAAU,cAAD,OAAgBd,EAAhB,OACTe,WAAW,aAAD,OAAeP,EAAf,OAGNQ,EAAgB,CACpBC,MAAM,GAAD,OAAKX,EAAYF,EAAjB,OAGDc,EAAqB,CACzBD,MAAM,GAAD,OAAKX,EAAL,OAuBP,OACE,sBAAKa,UAAU,WAAf,UACE,oBACEA,UAAU,iBACVC,MAAOJ,EAFT,SAIE,qBACEG,UAAU,yBACVC,MAAOP,EAFT,SAKIf,EAAOuB,KAAI,SAACC,EAAiBC,GAAlB,OACT,6BACE,qBACEC,IAAKF,EACLG,IAAG,UAAKF,EAAQ,GAChBH,MAAOF,KAJFI,UAYjB,sBAAKH,UAAU,oBAAf,UACE,wBACEA,UAAU,4BACVO,KAAK,SACLC,QAAS,kBAtCjB,WACE,IAAMC,EAAmB5B,EAAaM,EAAYJ,EAGhDD,EADE2B,GAAoB,EACTA,EAEA,GAgCMC,IAHjB,kBAQA,wBACEV,UAAU,4BACVO,KAAK,SACL,UAAQ,OACRC,QAAS,kBAzDjB,WACE,IAAMC,EAAmB5B,EAAaM,EAAYJ,EAGhDD,EADE2B,EAAmBhB,EACRgB,EAEA,GAmDME,IAJjB,qBAWF,sBAAKX,UAAU,mBAAf,UACE,uBACEY,QAAQ,YACRZ,UAAU,0BAFZ,6BAMA,uBACEA,UAAU,0BACVa,GAAG,YACHN,KAAK,SACLO,MAAO3B,EACP4B,SACE,SAACC,GAAD,OAAW5B,GAAc4B,EAAMC,cAAcH,QAE/C/B,KAAM,KAGR,uBACE6B,QAAQ,YACRZ,UAAU,0BAFZ,yBAMA,uBACEA,UAAU,0BACVa,GAAG,YACHN,KAAK,SACLO,MAAO7B,EACP8B,SACE,SAACC,GAAD,OAAW9B,GAAc8B,EAAMC,cAAcH,QAE/CI,IAAK,EACLC,IAAKxC,EAAOa,SAGd,uBACEoB,QAAQ,aACRZ,UAAU,0BAFZ,0BAMA,uBACEA,UAAU,0BACVa,GAAG,aACHN,KAAK,SACLO,MAAO/B,EACPgC,SACE,SAACC,GAAD,OAAWhC,GAASgC,EAAMC,cAAcH,QAE1CI,IAAK,EACLC,IAAKxC,EAAOa,SAGd,uBACEoB,QAAQ,oBACRZ,UAAU,0BAFZ,2BAMA,uBACEA,UAAU,0BACVa,GAAG,oBACHN,KAAK,SACLO,MAAOzB,EACP0B,SACE,SAACC,GAAD,OAAW1B,GAAsB0B,EAAMC,cAAcH,QAEvD/B,KAAM,aC1JVqC,E,4MACJC,MAAQ,CACNC,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,4CAIJ,WACE,IAAQA,EAAWC,KAAKF,MAAhBC,OAER,OACE,sBAAKtB,UAAU,MAAf,UACE,oBACE,UAAQ,QACRA,UAAU,aAFZ,6CAKIsB,EAAO9B,OALX,wBAQA,cAAC,EAAD,CAAUb,OAAQ2C,W,GA7BRE,IAAMC,WAmCTL,ICxCfM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1ce25028.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  source: string[];\n};\n\nconst Carousel: React.FC<Props> = ({ source }) => {\n  const [translate, setTranslate] = useState(0);\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n\n  const carouselLength = source.length * itemWidth;\n  const maxTranslateRight = -carouselLength + (itemWidth * frameSize);\n\n  const styleVisibleCarousel = {\n    transform: `translateX(${translate}px)`,\n    transition: `transform ${animationDuration}ms`,\n  };\n\n  const styleCarousel = {\n    width: `${itemWidth * frameSize}px`,\n  };\n\n  const styleCarouselImage = {\n    width: `${itemWidth}px`,\n  };\n\n  function nextButton() {\n    const currentTranslate = translate - (itemWidth * step);\n\n    if (currentTranslate > maxTranslateRight) {\n      setTranslate(currentTranslate);\n    } else {\n      setTranslate(0);\n    }\n  }\n\n  function prevButton() {\n    const currentTranslate = translate + (itemWidth * step);\n\n    if (currentTranslate <= 0) {\n      setTranslate(currentTranslate);\n    } else {\n      setTranslate(0);\n    }\n  }\n\n  return (\n    <div className=\"Carousel\">\n      <ul\n        className=\"Carousel__list\"\n        style={styleCarousel}\n      >\n        <div\n          className=\"Carousel__visible-list\"\n          style={styleVisibleCarousel}\n        >\n          {\n            source.map((element: string, index: number) => (\n              <li key={element}>\n                <img\n                  src={element}\n                  alt={`${index + 1}`}\n                  style={styleCarouselImage}\n                />\n              </li>\n            ))\n          }\n        </div>\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          className=\"Carousel__buttons--button\"\n          type=\"button\"\n          onClick={() => prevButton()}\n        >\n          Prev\n        </button>\n\n        <button\n          className=\"Carousel__buttons--button\"\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={() => nextButton()}\n        >\n          Next\n        </button>\n\n      </div>\n\n      <div className=\"Carousel__inputs\">\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"Carousel__inputs--label\"\n        >\n          Item width(px):\n        </label>\n        <input\n          className=\"Carousel__inputs--input\"\n          id=\"itemWidth\"\n          type=\"number\"\n          value={itemWidth}\n          onChange={\n            (event) => setItemWidth(+event.currentTarget.value)\n          }\n          step={10}\n        />\n\n        <label\n          htmlFor=\"itemFrame\"\n          className=\"Carousel__inputs--label\"\n        >\n          Frame size:\n        </label>\n        <input\n          className=\"Carousel__inputs--input\"\n          id=\"itemFrame\"\n          type=\"number\"\n          value={frameSize}\n          onChange={\n            (event) => setFrameSize(+event.currentTarget.value)\n          }\n          min={1}\n          max={source.length}\n        />\n\n        <label\n          htmlFor=\"stepScroll\"\n          className=\"Carousel__inputs--label\"\n        >\n          Scroll step:\n        </label>\n        <input\n          className=\"Carousel__inputs--input\"\n          id=\"stepScroll\"\n          type=\"number\"\n          value={step}\n          onChange={\n            (event) => setStep(+event.currentTarget.value)\n          }\n          min={1}\n          max={source.length}\n        />\n\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"Carousel__inputs--label\"\n        >\n          Duration(ms):\n        </label>\n        <input\n          className=\"Carousel__inputs--input\"\n          id=\"animationDuration\"\n          type=\"number\"\n          value={animationDuration}\n          onChange={\n            (event) => setAnimationDuration(+event.currentTarget.value)\n          }\n          step={500}\n        />\n      </div>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          data-cy=\"title\"\n          className=\"App__title\"\n        >\n          {` Carousel with\n          ${images.length}\n          images`}\n        </h1>\n        <Carousel source={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}